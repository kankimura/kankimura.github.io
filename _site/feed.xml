<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>A little bit of everything</title>
        <description>全てのちょっと〜止まらない好奇心〜</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Tue, 26 May 2020 00:07:00 +0900</pubDate>
        <lastBuildDate>Tue, 26 May 2020 00:07:00 +0900</lastBuildDate>
        <generator>Jekyll v4.0.1</generator>
        
            <item>
                <title>JekyllとGitHub Pagesでイケてるブログをサクッと作る</title>
                <description>&lt;p&gt;JekyllとGitHub Pageでブログを作成したので、作成方法を説明します。
無料で簡単に作ることが出来たので、個人ブログをもちたい場合はオススメです。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;jekyllとは&quot;&gt;Jekyllとは？&lt;/h1&gt;

&lt;p&gt;Jekyll(ジキル)とは静的サイトジェネレーターの一つです。
静的サイトジェネレータとはマークダウン式の記事とテーマをもとに静的ファイル（html/css/javascript）を自動生成してくれるツールです。&lt;br /&gt;
マークダウン方式の書き方さえ分かればコードは書く必要がないので非常に楽です。&lt;br /&gt;
Jekyll以外にも主要なものでGatsby、Hugo、Hexoといったものがありますが、私が知る範囲ではJekyllとHexoはテーマをサイトからダウンロード出来てマークダウン記事を作成するだけで良いので、簡単にやりたい場合はどちらかを選ぶと思います。&lt;br /&gt;
Hexoは中国が開発元で、ググって見ても中国語の情報が多かったのでJekyllにしました。&lt;/p&gt;

&lt;h1 id=&quot;github-pageとは&quot;&gt;Github Pageとは？&lt;/h1&gt;
&lt;p&gt;GitHubPagesとはGitHubによる静的サイトのホスティングサービスです。&lt;br /&gt;
要はブログのような情報が動的に変わらないコンテンツを公開するためのサービスです。&lt;br /&gt;
Wordpressはサーバーのレンタル料金がかかってしまいますが、GitHub Pagesは無料なので簡単に試しにやって見ることが出来るのが良い点です。&lt;/p&gt;

&lt;p&gt;JekyllとGithubPageを使用してブログを公開した場合以下のような感じになるます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2020-05-24/jekyll-github-pages.png&quot; alt=&quot;jekyll-github&quot; /&gt;&lt;/p&gt;

&lt;p&gt;全体的な流れは以下のようになります。&lt;br /&gt;
①マークダウン方式の記事を作成&lt;br /&gt;
②記事とテーマをもとにhtml/css/javascriptを生成(これが静的サイトジェネレータのお仕事)&lt;br /&gt;
③生成されたファイルをGitHubPagesにアップ&lt;br /&gt;
④ブラウザからアクセスし、GitHubPagesにアップされたファイルを画面に表示する。&lt;/p&gt;

&lt;p&gt;では実際にブログを作成して公開するまでの手順を以下の順で説明します。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;環境構築(RubyとJekyllのインストール)&lt;/li&gt;
  &lt;li&gt;ブログテーマのダウンロード&lt;/li&gt;
  &lt;li&gt;テスト記事の投稿&lt;/li&gt;
  &lt;li&gt;GitHub Pagesに公開&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-環境構築&quot;&gt;1. 環境構築&lt;/h3&gt;
&lt;h4 id=&quot;rubyのインストール&quot;&gt;Rubyのインストール&lt;/h4&gt;
&lt;p&gt;バージョン管理のためにrbenv,ruby-builをインストール&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install rbenv ruby-build
$ echo 'eval &quot;$(rbenv init -)&quot;' &amp;gt;&amp;gt; ~/.bash_profile
$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;インストールするRubyのバージョンを指定してRubyをインストール&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv install -l      //これで表示される最新のバージョンを指定する
$ rbenv install 2.6.0
$ rbenv global 2.6.0    //デフォルトで使用するバージョンを指定
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;jekyllのインストール&quot;&gt;Jekyllのインストール&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll bundler    //Gem管理ツールbundlerとJekyllのインストール
$ jekyll new blog               //Jekyll用のディレクトリを作成
$ cd blog
$ bundle exec jekyll serve      //Jekyllをローカルで起動
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;http://localhost:4000 へアクセスしローカル環境でサイトが表示されていることを確認します。
ローカルで確認する際はbundle exec jekyll serveというコマンドでJekyllを起動する必要があります。&lt;br /&gt;
起動中に記事を編集しても反映されるので編集しても再起動する必要はありません。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;2-テーマのダウンロード&quot;&gt;2. テーマのダウンロード&lt;/h3&gt;
&lt;p&gt;今のままだとデフォルトのテーマで味気がないので、テーマをダウンロードします。
公式サイトに色々なテーマがありますが、 今回は&lt;a href=&quot;https://jekyllthemes.io/jekyll-blog-themes&quot; target=&quot;_blank&quot; style=&quot;word-break: break-all;&quot;&gt;ブログ用のテーマ&lt;/a&gt;から無料のものを選択します。
私は &lt;a href=&quot;https://jekyllthemes.io/theme/scriptor&quot; target=&quot;_blank&quot;&gt;Scriptor&lt;/a&gt; というなかなかイケてるテーマにしました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/     //ホームディレクトリに移動（これは好きな場所でOK）
$ git clone https://github.com/JustGoodThemes/Scriptor-Jekyll-Theme.git
$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;http://localhost:4000 にアクセスして以下のようにテーマが反映されている事を確認します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2020-05-24/scriptor_template.png&quot; alt=&quot;scriptor_template&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3-テスト記事の作成&quot;&gt;3. テスト記事の作成&lt;/h3&gt;
&lt;p&gt;マークダウンファイルを作成して自分でも記事が作成出来る事を確認しましょう。&lt;/p&gt;

&lt;p&gt;以下ディレクトリ配下に2020-01-01-test.mdというマークダウンファイルを作成
/Users/{username}/Scriptor-Jekyll-Theme/_posts&lt;/p&gt;

&lt;p&gt;以下内容を記述して保存&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title: &quot;test&quot;
description: &quot;test&quot;
date: 2020-01-01
---
テストですよ。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;http://localhost:4000 を更新すると作成した記事が反映されていることが分かります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2020-05-24/test-article.png&quot; alt=&quot;test-article&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今後記事を作成するする際はこのようにマークダウンファイルを作成してローカルで確認後にGitHubPagesにアップして公開する流れになります。&lt;/p&gt;

&lt;p&gt;このままだとダウンロードしたままの情報が残ってしまいますので最低限以下は変更しておきましょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以下ディレクトリ配下の不要なマークダウンファイルを削除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/Users/{username}/Scriptor-Jekyll-Theme/_posts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以下の筆者情報を変更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/Users/{username}/Scriptor-Jekyll-Theme/_data/author.json&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aboutページの編集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/Users/{username}/Scriptor-Jekyll-Theme/about.md&lt;/p&gt;

&lt;h3 id=&quot;github-pagesへ公開&quot;&gt;GitHub Pagesへ公開&lt;/h3&gt;

&lt;h4 id=&quot;githubアカウントの作成&quot;&gt;GitHubアカウントの作成&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/join&quot; target=&quot;_blank&quot;&gt;GitHubの公式サイト&lt;/a&gt;でアカウントを登録します。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;4-リポジトリの作成&quot;&gt;4. リポジトリの作成&lt;/h3&gt;
&lt;p&gt;作成したアカウントでブログ用のリポジトリを作成します。(作成方法は以下を参考)
 リポジトリの名前は「username.git.io」として下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/ja/enterprise/2.16/user/github/working-with-github-pages/creating-a-github-pages-site-with-jekyll&quot;&gt;リポジトリ新規作成方法&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;gitのインストール&quot;&gt;Gitのインストール&lt;/h3&gt;
&lt;p&gt;今回はパッケージ管理ツールのHomebrewでインストールしました。
 Homebrewがインストールされているか確認&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ brew -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;バージョン情報が出力されない場合はHomebrewをインストールする。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Homebrewでgitをインストールする。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;github-pagesへ公開-1&quot;&gt;GitHub Pagesへ公開&lt;/h3&gt;
&lt;p&gt;ローカルリポジトリを作成してGitHubで作成してしたリモートリポジトリにコミット&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/blogs
$ git init        //ローカルリポジトリを作成
$ git add .       //コミット対象ファイル追加
$ git commit -m &quot;initial commit&quot;    //コミット対象ファイルをローカルリポジトリにコミット
$ git remote set-url origin git@github.com:{username}/{username}.github.io.git    //コミット対象のリポジトリURLを指定
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;GitHubでリポジトリを見ると上記のコミット内容が反映されているはずです。
https://{username}.github.io/ にアクセスするとテーマが反映されている事を確認できます。
GitHub上で反映されているけどブラウザで反映されていない場合は少し時間を置いてから確認してみて下さい。&lt;/p&gt;

&lt;p&gt;これでブログが公開されましたので、あとはローカルで記事を作成して完成したらGitHubに公開するという流れで記事を作成することが出来ます。
記事の作成自体は非常に簡単なのであとは自分の好きな事をガシガシ書いていきましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;参考&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;http://jmcglone.com/guides/github-pages/&quot; target=&quot;_blank&quot; style=&quot;word-break: break-all;&quot;&gt;http://jmcglone.com/guides/github-pages/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://jekyllrb.com/docs/&quot; target=&quot;_blank&quot; style=&quot;word-break: break-all;&quot;&gt;https://jekyllrb.com/docs/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://marbles.hatenablog.com/entry/2019/01/16/221417&quot; target=&quot;_blank&quot; style=&quot;word-break: break-all;&quot;&gt;https://marbles.hatenablog.com/entry/2019/01/16/221417&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://qiita.com/stkdev/items/0e2df27736acbea9bd26&quot; target=&quot;_blank&quot; style=&quot;word-break: break-all;&quot;&gt;https://qiita.com/stkdev/items/0e2df27736acbea9bd26&lt;/a&gt;&lt;/p&gt;
</description>
                <pubDate>Sat, 23 May 2020 00:00:00 +0900</pubDate>
                <link>http://localhost:4000/CreateBlogWithHexoandGitHubPages</link>
                <guid isPermaLink="true">http://localhost:4000/CreateBlogWithHexoandGitHubPages</guid>
                
                <category>tips</category>
                
                <category>work</category>
                
                
            </item>
        
    </channel>
</rss>